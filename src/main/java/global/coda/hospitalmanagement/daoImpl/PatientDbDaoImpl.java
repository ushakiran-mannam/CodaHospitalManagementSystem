package global.coda.hospitalmanagement.daoImpl;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import global.coda.hospitalmanagement.constant.QueryConstant;
import global.coda.hospitalmanagement.dao.PatientDbDao;
import global.coda.hospitalmanagement.dbconnection.CustomPreparedStatement;
import global.coda.hospitalmanagement.dbconnection.SqlConnection;
import global.coda.hospitalmanagement.model.Doctor;
import global.coda.hospitalmanagement.model.Patient;


// TODO: Auto-generated Javadoc
/**
 * The Class PatientDbDaoImpl.
 */
public class PatientDbDaoImpl implements PatientDbDao{
	
	/**
	 * Insert.
	 *
	 * @param patient the patient
	 * @return the boolean
	 * @throws SQLException the SQL exception
	 * @throws ClassNotFoundException the class not found exception
	 */
	@Override
	public Boolean insert(Patient patient) throws SQLException, ClassNotFoundException ,Exception{

		String username = patient.getUsername();
		String email = patient.getEmail();
		String password = patient.getPassword();
		int roleId = patient.getRoleId();
		// t_patient Contents
		int age = patient.getAge();
		String area = patient.getArea();
		String city = patient.getCity();
		String state = patient.getState();

		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.INSERT_USER);
		statement.setString(1, username);
		statement.setString(2, email);
		statement.setString(3, password);
		statement.setInt(4, roleId);

		int numberOfRowsAffected = CustomPreparedStatement.executeUpdate(statement);
		// get the Autogenerated Key
		ResultSet privateKeys = statement.getGeneratedKeys();
		if (privateKeys.next()) {
			patient.setUserId(privateKeys.getInt(1));
		}

		int userId = patient.getUserId();
		System.out.println(userId);

		statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.INSERT_PATIENT);
		statement.setInt(1, age);
		statement.setString(2, area);
		statement.setString(3, city);
		statement.setString(4, state);
		statement.setInt(5, userId);
		int numberOfRowsAffected1 = CustomPreparedStatement.executeUpdate(statement);
		
		Boolean bool = false;
		if (numberOfRowsAffected == numberOfRowsAffected1) {
			bool = true;
		} else {
			SqlConnection.rollBack();
		}
		SqlConnection.closeConnection();

		return bool;
	}

	/**
	 * Read.
	 *
	 * @param patient the patient
	 * @return the patient
	 * @throws SQLException the SQL exception
	 * @throws ClassNotFoundException the class not found exception
	 */
	@Override
	public Patient read(Patient patient) throws SQLException, ClassNotFoundException,Exception {
		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.READ_PATIENT);
		statement.setInt(1, patient.getUserId());
		statement.setInt(2, 1);
		statement.setInt(3, 1);

		ResultSet resultSet = CustomPreparedStatement.executePreparedStatement(statement);
		if(!resultSet.isBeforeFirst())
		{   
			throw new SQLException("data not found");
		}
		while (resultSet.next()) {
			patient.setUserId(resultSet.getInt(1));
			patient.setUsername(resultSet.getString(2));
			patient.setEmail(resultSet.getString(3));
			patient.setPassword(resultSet.getString(4));
			patient.setRoleId(resultSet.getInt(5));
			patient.setAge(resultSet.getInt(6));
			patient.setArea(resultSet.getString(7));
			patient.setCity(resultSet.getString(8));
			patient.setState(resultSet.getString(9));
		}

		SqlConnection.closeConnection();
		return patient;

	}

	/**
	 * Read all.
	 *
	 * @return the list
	 * @throws SQLException the SQL exception
	 * @throws ClassNotFoundException the class not found exception
	 */
	@Override
	public List<Patient> readAll() throws SQLException, ClassNotFoundException ,Exception {
		List<Patient> patientList = new ArrayList<>();
		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.READ_ALL_PATIENT);
		statement.setInt(1, 1);
		statement.setInt(2, 1);

		ResultSet resultSet = CustomPreparedStatement.executePreparedStatement(statement);
		while (resultSet.next()) {
			Patient patient = new Patient();
			patient.setUserId(resultSet.getInt(1));
			patient.setUsername(resultSet.getString(2));
			patient.setEmail(resultSet.getString(3));
			patient.setPassword(resultSet.getString(4));
			patient.setRoleId(resultSet.getInt(5));
			patient.setAge(resultSet.getInt(6));
			patient.setArea(resultSet.getString(7));
			patient.setCity(resultSet.getString(8));
			patient.setState(resultSet.getString(9));
			patientList.add(patient);
		}

		SqlConnection.closeConnection();
		return patientList;
	}

	/**
	 * Read all with masked details.
	 *
	 * @return the list
	 * @throws SQLException the SQL exception
	 * @throws ClassNotFoundException the class not found exception
	 */
	@Override
	public List<Patient> readAllWithMaskedDetails() throws SQLException, ClassNotFoundException ,Exception {
		List<Patient> patientList = new ArrayList<>();
		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.READ_PATIENT_MASKED_DETAILS);
		statement.setInt(1, 1);
		statement.setInt(2, 1);

		ResultSet resultSet = CustomPreparedStatement.executePreparedStatement(statement); //statement.executeQuery();
		while (resultSet.next()) {
			Patient patient = new Patient();
			patient.setUsername(resultSet.getString(1));
			patient.setEmail(resultSet.getString(2));
			patient.setAge(resultSet.getInt(3));
			patientList.add(patient);
		}
		SqlConnection.closeConnection();
		return patientList;
	}

	/**
	 * Update.
	 *
	 * @param patient the patient
	 * @return the boolean
	 * @throws SQLException the SQL exception
	 * @throws ClassNotFoundException the class not found exception
	 */
	@Override
	public Boolean update(Patient patient) throws SQLException, ClassNotFoundException ,Exception {
		String username = patient.getUsername();
		String email = patient.getEmail();
		String password = patient.getPassword();
		int userId = patient.getUserId();
		// t_patient Contents
		int age = patient.getAge();
		String area = patient.getArea();
		String city = patient.getCity();
		String state = patient.getState();
        
		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.UPDATE_USER);
		statement.setString(1, username);
		statement.setString(2, email);
		statement.setString(3, password);
		statement.setInt(4, userId);
		statement.setInt(5, 1);
		CustomPreparedStatement.executeUpdate(statement);
		statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.UPDATE_PATIENT);
		statement.setInt(1, age);
		statement.setString(2, area);
		statement.setString(3, city);
		statement.setString(4, state);
		statement.setInt(5, userId);
		statement.setInt(6, 1);
		CustomPreparedStatement.executeUpdate(statement);
		SqlConnection.closeConnection();

		return true;
	}

	/**
	 * Delete.
	 *
	 * @param patient the patient
	 * @return the boolean
	 * @throws SQLException the SQL exception
	 * @throws ClassNotFoundException the class not found exception
	 */
	@Override
	public Boolean delete(Patient patient) throws SQLException, ClassNotFoundException ,Exception {
		int userId = patient.getUserId();

		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.DELETE_USER);
		statement.setInt(1, 0);
		statement.setInt(2, userId);
		CustomPreparedStatement.executeUpdate(statement);
		statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.DELETE_PATIENT);
		statement.setInt(1, 0);
		statement.setInt(2, userId);
		CustomPreparedStatement.executeUpdate(statement);
		SqlConnection.closeConnection();
		
		return true;
	}

	public Patient readWithOutClosingConnection(Patient patient) throws ClassNotFoundException, SQLException ,Exception {
		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.READ_PATIENT);
		statement.setInt(1, patient.getUserId());
		statement.setInt(2, 1);
		statement.setInt(3, 1);

		ResultSet resultSet = CustomPreparedStatement.executePreparedStatement(statement);
		if(!resultSet.isBeforeFirst())
		{   
			throw new SQLException("data not found");
		}
		while (resultSet.next()) {
			patient.setUserId(resultSet.getInt(1));
			patient.setUsername(resultSet.getString(2));
			patient.setEmail(resultSet.getString(3));
			patient.setPassword(resultSet.getString(4));
			patient.setRoleId(resultSet.getInt(5));
			patient.setAge(resultSet.getInt(6));
			patient.setArea(resultSet.getString(7));
			patient.setCity(resultSet.getString(8));
			patient.setState(resultSet.getString(9));
		}

		SqlConnection.closeConnection();
		return patient;

	}

	public List<Patient> readParticularDoctorPatients(Doctor doctor) throws ClassNotFoundException, SQLException {
		List<Patient> patientList = new ArrayList<>();
		PreparedStatement statement = CustomPreparedStatement.getPreparedStatement(QueryConstant.READ_ALL_PATIENT_FOR_PARTICULAR_DOCTOR);
		statement.setInt(1, doctor.getUserId());
		
		ResultSet resultSet = CustomPreparedStatement.executePreparedStatement(statement);
		if(!resultSet.isBeforeFirst())
		{   
			throw new SQLException("data not found");
		}
		while (resultSet.next()) {
			Patient patient = new Patient();
			patient.setUserId(resultSet.getInt(2));
			patient.setUsername(resultSet.getString(3));
			patient.setEmail(resultSet.getString(4));
			//patient.setPassword(resultSet.getString(4));
			//patient.setRoleId(resultSet.getInt(5));
			patient.setAge(resultSet.getInt(7));
			patient.setArea(resultSet.getString(8));
			patient.setCity(resultSet.getString(9));
			patient.setState(resultSet.getString(10));
			patientList.add(patient);
		}

		SqlConnection.closeConnection();
		return patientList;

	}

}
